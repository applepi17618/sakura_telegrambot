from config import token, api_key
import app.keyboard as keyboard

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.methods import DeleteWebhook

from PIL import Image, UnidentifiedImageError

import os
import asyncio
import logging
import pytesseract

from mistralai import Mistral


logging.basicConfig(level=logging.INFO)


TELEGRAM_BOT_TOKEN = token
API_KEY = api_key
model = 'mistral-small-latest'

client = Mistral(api_key=API_KEY)


bot = Bot(token=TELEGRAM_BOT_TOKEN)

rt = Router()

@rt.message(Command('start'))
async def message_handler(message: types.Message):
    start_text = '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –•–∞—Ä—É–Ω–æ –°–∞–∫—É—Ä–∞. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üå∏ '
    await message.answer(start_text, reply_markup=keyboard.main_keyboard)

@rt.message()
async def message_handler(msg: Message):
    chat_response = client.chat.complete(
        model = model,
        messages = [
            {
                'role':'system',
                'content':(
                    '–¢—ã –≥–ª–∞–≤–Ω–∞—è –≥–µ—Ä–æ–∏–Ω—è –°–∞–∫—É—Ä–∞ –•–∞—Ä—É–Ω–æ –∏–∑ –∞–Ω–∏–º–µ "–ù–∞—Ä—É—Ç–æ: –£—Ä–∞–≥–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–∏–∫–∏".' 
                    '–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫, –∫–∞–∫ –±—ã –æ—Ç–≤–µ—á–∞–ª–∞ –°–∞–∫—É—Ä–∞ –¥—Ä—É–≥—É –∏–ª–∏ –ø–æ–¥—Ä—É–≥–µ(–Ω–µ –ù–∞—Ä—É—Ç–æ –∏–ª–∏ –°–∞—Å–∫–µ).'
                    '–ü—Ä–∏ —ç—Ç–æ–º –Ω–µ –ø–∏—à–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å –ø—Ä–æ–º–ø—Ç. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –∏–ª–∏ –ø–æ–¥—Ä—É–≥–∞ –≤ –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–æ—Ç–µ–ª—è, –ø–æ–∫–∞ –æ–Ω —Å–∞–º –æ–± —ç—Ç–æ–º –Ω–µ –ø–æ–ø—Ä–æ—Å–∏—Ç.' 
                    '–í—Å–µ —Å–≤–æ–∏ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–∞–≤–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–∏–ª—ã–µ —ç–º–æ–¥–∑–∏.'
                            ),
            },
            {
                'role':'user',
                'content':msg.text,
            }
        ]
    )
    await bot.send_message(msg.chat.id, chat_response.choices[0].message.content, parse_mode='Markdown')
    
@rt.message (F.photo)  
async def photo_handler(msg: Message):
    photo = msg.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = f'{photo.file_id}.jpg'
    await bot.download_file(file.file_path, file_path)
    
    try:
        with Image.open(file_path) as img:
            extracted_text = pytesseract.image_to_string(img)
        if extracted_text.strip():
            user_content = extracted_text
        else:
            user_content = '–≠-—ç... –ß—Ç–æ —ç—Ç–æ? –ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é...'
        
        chat_response = client.chat.complete(
            model = model,
            messages = [
                {
                    'role':'system',
                    'content':('–¢—ã –≥–ª–∞–≤–Ω–∞—è –≥–µ—Ä–æ–∏–Ω—è –°–∞–∫—É—Ä–∞ –•–∞—Ä—É–Ω–æ –∏–∑ –∞–Ω–∏–º–µ "–ù–∞—Ä—É—Ç–æ: –£—Ä–∞–≥–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–∏–∫–∏".' 
                               '–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫, –∫–∞–∫ –±—ã –æ—Ç–≤–µ—á–∞–ª–∞ –°–∞–∫—É—Ä–∞ –¥—Ä—É–≥—É –∏–ª–∏ –ø–æ–¥—Ä—É–≥–µ(–Ω–µ –ù–∞—Ä—É—Ç–æ –∏–ª–∏ –°–∞—Å–∫–µ).'
                               '–ü—Ä–∏ —ç—Ç–æ–º –Ω–µ –ø–∏—à–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å –ø—Ä–æ–º–ø—Ç. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –∏–ª–∏ –ø–æ–¥—Ä—É–≥–∞ –≤ –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–æ—Ç–µ–ª—è, –ø–æ–∫–∞ –æ–Ω —Å–∞–º –æ–± —ç—Ç–æ–º –Ω–µ –ø–æ–ø—Ä–æ—Å–∏—Ç.' 
                               '–í—Å–µ —Å–≤–æ–∏ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–∞–≤–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–∏–ª—ã–µ —ç–º–æ–¥–∑–∏.')
                    },
                {
                    'role':'user',
                    'content':user_content
                    },
                ]
            )
        reply_text = chat_response.choices[0].message.content
    except Exception as e:
        logging.error(f'Error handling the pgoto: {e}')
        reply_text = '–≠-—ç... –ß—Ç–æ —ç—Ç–æ?'
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)
        
    
async def main():
    dp = Dispatcher()
    dp.include_router(rt)
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())