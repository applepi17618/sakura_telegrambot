from config import token, api_key
import app.keyboard as keyboard

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.methods import DeleteWebhook

import asyncio
import logging

from mistralai import Mistral
logging.basicConfig(level=logging.INFO)


TELEGRAM_BOT_TOKEN = token
API_KEY = api_key
model = 'mistral-small-latest'
model_pics = 'pixtral-12b-2409'

client = Mistral(api_key=API_KEY)


bot = Bot(token=TELEGRAM_BOT_TOKEN)

rt = Router()

@rt.message(Command('start'))
async def message_handler(message: types.Message):
    start_text = "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –•–∞—Ä—É–Ω–æ –°–∞–∫—É—Ä–∞. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üå∏ "
    await message.answer(start_text, reply_markup=keyboard.main_keyboard)

@rt.message(F.photo)  
async def photo_handler(msg: Message):
    """Making a bot respond to images."""
    try:
        # Take the last photo.
        photo = msg.photo[-1]
        file = await bot.get_file(photo.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file.file_path}"

        logging.info(f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {file_url}")

        # Download the image into storage
        image_data = await bot.download_file(file.file_path)

        # Writing a prompt for a Pixtral model.
        messages = [
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–∞–∫, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∞ –±—ã –°–∞–∫—É—Ä–∞ –•–∞—Ä—É–Ω–æ –∏–∑ –∞–Ω–∏–º–µ '–ù–∞—Ä—É—Ç–æ: –£—Ä–∞–≥–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–∏–∫–∏', –µ—Å–ª–∏ –±—ã –µ—ë –¥—Ä—É–≥ –∏–ª–∏ –ø–æ–¥—Ä—É–≥–∞(–Ω–µ –ù–∞—Ä—É—Ç–æ –∏–ª–∏ –°–∞—Å–∫–µ) –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–π –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
                        "–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∂–∏–≤—ã–º–∏ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–∏–ª—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–º–æ–¥–∑–∏."
                        "–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞, –Ω–µ –æ–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –≥–µ–Ω–¥–µ—Ä–Ω–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏."
                        },
                    {
                        "type": "image_url",
                        "image_url": file_url
                        }
                ]
            }
        ]

        # Sending a request to Pixtral.
        chat_response = client.chat.complete(
            model=model_pics,
            messages=messages
            )

        # Sending a response to the user.
        reply_text = chat_response.choices[0].message.content
        await msg.answer(reply_text, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await msg.answer("–≠-—ç–º... –ü—Ä–æ—Å—Ç–∏, –Ω–æ —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?")
        
@rt.message()  
async def message_handler(msg: Message):
    """Making a bot respond to text messages."""
    try:
        chat_response = client.chat.complete(
            model=model,
            messages=[
                {
                    "role": "system",  
                    "content": (
                        "–¢—ã –≥–ª–∞–≤–Ω–∞—è –≥–µ—Ä–æ–∏–Ω—è –°–∞–∫—É—Ä–∞ –•–∞—Ä—É–Ω–æ –∏–∑ –∞–Ω–∏–º–µ '–ù–∞—Ä—É—Ç–æ: –£—Ä–∞–≥–∞–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–∏–∫–∏'."
                        "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫, –∫–∞–∫ –±—ã –æ—Ç–≤–µ—á–∞–ª–∞ –°–∞–∫—É—Ä–∞ –¥—Ä—É–≥—É –∏–ª–∏ –ø–æ–¥—Ä—É–≥–µ(–Ω–µ –ù–∞—Ä—É—Ç–æ –∏–ª–∏ –°–∞—Å–∫–µ)."
                        "–ü—Ä–∏ —ç—Ç–æ–º –Ω–µ –ø–∏—à–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å –ø—Ä–æ–º–ø—Ç."
                        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –∏–ª–∏ –ø–æ–¥—Ä—É–≥–∞ –≤ –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞ –æ–Ω —Å–∞–º –æ–± —ç—Ç–æ–º –Ω–µ –ø–æ–ø—Ä–æ—Å–∏—Ç."
                        "–í—Å–µ —Å–≤–æ–∏ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–∞–≤–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–∏–ª—ã–µ —ç–º–æ–¥–∑–∏."
                    ),
                },
                {
                    "role": "user",  
                    "content": msg.text,
                }
            ]
        )
        await bot.send_message(msg.chat.id, chat_response.choices[0].message.content, parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await msg.answer("–ò–∑–≤–∏–Ω–∏, —á—Ç–æ?")
    
async def main():
    dp = Dispatcher()
    dp.include_router(rt)
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
    